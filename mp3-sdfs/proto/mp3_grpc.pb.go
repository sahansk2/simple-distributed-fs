// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/mp3.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	GetReplicas(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (Master_GetReplicasClient, error)
	GetReplicasNonQuorum(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (Master_GetReplicasNonQuorumClient, error)
	FinalizeWrite(ctx context.Context, in *FileAndQuorumInfo, opts ...grpc.CallOption) (*Status, error)
	FinalizeDelete(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*Status, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetReplicas(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (Master_GetReplicasClient, error) {
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], "/proto.Master/GetReplicas", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterGetReplicasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Master_GetReplicasClient interface {
	Recv() (*ReplicaInfo, error)
	grpc.ClientStream
}

type masterGetReplicasClient struct {
	grpc.ClientStream
}

func (x *masterGetReplicasClient) Recv() (*ReplicaInfo, error) {
	m := new(ReplicaInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterClient) GetReplicasNonQuorum(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (Master_GetReplicasNonQuorumClient, error) {
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[1], "/proto.Master/GetReplicasNonQuorum", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterGetReplicasNonQuorumClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Master_GetReplicasNonQuorumClient interface {
	Recv() (*ReplicaInfo, error)
	grpc.ClientStream
}

type masterGetReplicasNonQuorumClient struct {
	grpc.ClientStream
}

func (x *masterGetReplicasNonQuorumClient) Recv() (*ReplicaInfo, error) {
	m := new(ReplicaInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterClient) FinalizeWrite(ctx context.Context, in *FileAndQuorumInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Master/FinalizeWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) FinalizeDelete(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.Master/FinalizeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	GetReplicas(*FileInfo, Master_GetReplicasServer) error
	GetReplicasNonQuorum(*FileInfo, Master_GetReplicasNonQuorumServer) error
	FinalizeWrite(context.Context, *FileAndQuorumInfo) (*Status, error)
	FinalizeDelete(context.Context, *FileInfo) (*Status, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) GetReplicas(*FileInfo, Master_GetReplicasServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedMasterServer) GetReplicasNonQuorum(*FileInfo, Master_GetReplicasNonQuorumServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReplicasNonQuorum not implemented")
}
func (UnimplementedMasterServer) FinalizeWrite(context.Context, *FileAndQuorumInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeWrite not implemented")
}
func (UnimplementedMasterServer) FinalizeDelete(context.Context, *FileInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeDelete not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_GetReplicas_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetReplicas(m, &masterGetReplicasServer{stream})
}

type Master_GetReplicasServer interface {
	Send(*ReplicaInfo) error
	grpc.ServerStream
}

type masterGetReplicasServer struct {
	grpc.ServerStream
}

func (x *masterGetReplicasServer) Send(m *ReplicaInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Master_GetReplicasNonQuorum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServer).GetReplicasNonQuorum(m, &masterGetReplicasNonQuorumServer{stream})
}

type Master_GetReplicasNonQuorumServer interface {
	Send(*ReplicaInfo) error
	grpc.ServerStream
}

type masterGetReplicasNonQuorumServer struct {
	grpc.ServerStream
}

func (x *masterGetReplicasNonQuorumServer) Send(m *ReplicaInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Master_FinalizeWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAndQuorumInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).FinalizeWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/FinalizeWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).FinalizeWrite(ctx, req.(*FileAndQuorumInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_FinalizeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).FinalizeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/FinalizeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).FinalizeDelete(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizeWrite",
			Handler:    _Master_FinalizeWrite_Handler,
		},
		{
			MethodName: "FinalizeDelete",
			Handler:    _Master_FinalizeDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReplicas",
			Handler:       _Master_GetReplicas_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReplicasNonQuorum",
			Handler:       _Master_GetReplicasNonQuorum_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mp3.proto",
}

// ReplicaClient is the client API for Replica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaClient interface {
}

type replicaClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaClient(cc grpc.ClientConnInterface) ReplicaClient {
	return &replicaClient{cc}
}

// ReplicaServer is the server API for Replica service.
// All implementations must embed UnimplementedReplicaServer
// for forward compatibility
type ReplicaServer interface {
	mustEmbedUnimplementedReplicaServer()
}

// UnimplementedReplicaServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaServer struct {
}

func (UnimplementedReplicaServer) mustEmbedUnimplementedReplicaServer() {}

// UnsafeReplicaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaServer will
// result in compilation errors.
type UnsafeReplicaServer interface {
	mustEmbedUnimplementedReplicaServer()
}

func RegisterReplicaServer(s grpc.ServiceRegistrar, srv ReplicaServer) {
	s.RegisterService(&Replica_ServiceDesc, srv)
}

// Replica_ServiceDesc is the grpc.ServiceDesc for Replica service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replica_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Replica",
	HandlerType: (*ReplicaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/mp3.proto",
}
